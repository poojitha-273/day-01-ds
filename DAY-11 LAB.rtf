{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\froman\fprq2\fcharset0 Cambria;}{\f2\froman\fprq2\fcharset0 Times New Roman;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs40\lang9             \b DAY-11 LAB\par

\pard\widctlpar\sa160\sl360\slmult1\qj\fs36 1.\f1\fs28\lang1033 Write a C program to search for a number, Min, Max from a BST\b0\par

\pard\widctlpar\sa160\sl240\slmult1\qj #include <stdio.h>\par
#include <stdlib.h>\par
struct Node \{\par
    int data;\par
    struct Node* left;\par
    struct Node* right;\par
\};\par
struct Node* newNode(int data) \{\par
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));\par
    node->data = data;\par
    node->left = node->right = NULL;\par
    return node;\par
\}\par
struct Node* insert(struct Node* node, int data) \{\par
    if (node == NULL) return newNode(data);\par
    if (data < node->data) node->left = insert(node->left, data);\par
    else node->right = insert(node->right, data);\par
    return node;\par
\}\par
int findMin(struct Node* node) \{\par
    while (node->left != NULL) node = node->left;\par
    return node->data;\par
\}\par
int findMax(struct Node* node) \{\par
    while (node->right != NULL) node = node->right;\par
    return node->data;\par
\}\par
    int main() \{\par
    struct Node* root = NULL;\par
    root = insert(root, 15);\par
    insert(root, 10);\par
    insert(root, 20);\par
    insert(root, 8);\par
    insert(root, 12);\par
    printf("Minimum: %d\\n", findMin(root));\par
    printf("Maximum: %d\\n", findMax(root));\par
    return 0;\par
\}\par
\b output:\par
\b0 Minimum: 8\par
Maximum: 20\par
\b 2.Write a C program to perform the following operations:\par

\pard\widctlpar\li720\sa160\sl240\slmult1\qj a) Insert an element into a AVL tree.\par
b) Delete an element from a AVL tree.\par
c) Search for a key element in a AVL tree.\par
\b0 #include <stdio.h>\par
#include <stdlib.h>\par
typedef struct AVLNode \{\par
    int key;\par
    struct AVLNode *left;\par
    struct AVLNode *right;\par
    int height;\par
\} AVLNode;\par
AVLNode* createNode(int key);\par
int height(AVLNode *node);\par
int max(int a, int b);\par
AVLNode* rightRotate(AVLNode *y);\par
AVLNode* leftRotate(AVLNode *x);\par
int getBalance(AVLNode *node);\par
AVLNode* insert(AVLNode *node, int key);\par
AVLNode* minValueNode(AVLNode *node);\par
AVLNode* deleteNode(AVLNode *root, int key);\par
AVLNode* search(AVLNode *root, int key);\par
void inorder(AVLNode *root);\par
void freeTree(AVLNode *root);\par
AVLNode* createNode(int key) \{\par
    AVLNode *node = (AVLNode*)malloc(sizeof(AVLNode));\par
    node->key = key;\par
    node->left = NULL;\par
    node->right = NULL;\par
    node->height = 1;\par
    return node;\par
\}\par
int height(AVLNode *node) \{\par
    return (node == NULL) ? 0 : node->height;\par
\}\par
int max(int a, int b) \{\par
    return (a > b) ? a : b;\par
\}\par
AVLNode* rightRotate(AVLNode *y) \{\par
    AVLNode *x = y->left;\par
    AVLNode *T2 = x->right;\par
    x->right = y;\par
    y->left = T2;\par
    y->height = max(height(y->left), height(y->right)) + 1;\par
    x->height = max(height(x->left), height(x->right)) + 1;\par
    return x;\par
\}\par
AVLNode* leftRotate(AVLNode *x) \{\par
    AVLNode *y = x->right;\par
    AVLNode *T2 = y->left;\par
\par
    y->left = x;\par
    x->right = T2;\par
\par
    x->height = max(height(x->left), height(x->right)) + 1;\par
    y->height = max(height(y->left), height(y->right)) + 1;\par
\par
    return y;\par
\}\par
int getBalance(AVLNode *node) \{\par
    return (node == NULL) ? 0 : height(node->left) - height(node->right);\par
\}\par
AVLNode* insert(AVLNode *node, int key) \{\par
    if (node == NULL)\par
        return createNode(key);\par
\par
    if (key < node->key)\par
        node->left = insert(node->left, key);\par
    else if (key > node->key)\par
        node->right = insert(node->right, key);\par
    else\par
        return node; \par
node->height = 1 + max(height(node->left), height(node->right));\par
\par
    int balance = getBalance(node);\par
    if (balance > 1 && key < node->left->key)\par
        return rightRotate(node);\par
    if (balance < -1 && key > node->right->key)\par
        return leftRotate(node);\par
    if (balance > 1 && key > node->left->key) \{\par
        node->left = leftRotate(node->left);\par
        return rightRotate(node);\par
    \}\par
    if (balance < -1 && key < node->right->key) \{\par
        node->right = rightRotate(node->right);\par
        return leftRotate(node);\par
    \}\par
    return node;\par
\}\par
AVLNode* minValueNode(AVLNode *node) \{\par
    AVLNode *current = node;\par
    while (current->left != NULL)\par
        current = current->left;\par
    return current;\par
\}\par
AVLNode* deleteNode(AVLNode *root, int key) \{\par
    if (root == NULL)\par
        return root;\par
        if (key < root->key)\par
        root->left = deleteNode(root->left, key);\par
    else if (key > root->key)\par
        root->right = deleteNode(root->right, key);\par
    else \{\par
        if ((root->left == NULL) || (root->right == NULL)) \{\par
            AVLNode *temp = root->left ? root->left : root->right;\par
            if (temp == NULL) \{\par
                temp = root;\par
                root = NULL;\par
            \} else\par
                *root = *temp;\par
            free(temp);\par
        \} else \{\par
            AVLNode *temp = minValueNode(root->right);\par
            root->key = temp->key;\par
            root->right = deleteNode(root->right, temp->key);\par
        \}\par
    \}\par
\par
    if (root == NULL)\par
        return root;\par
\par
    root->height = 1 + max(height(root->left), height(root->right));\par
\par
    int balance = getBalance(root);\par
\par
    if (balance > 1 && getBalance(root->left) >= 0)\par
        return rightRotate(root);\par
\par
    if (balance > 1 && getBalance(root->left) < 0) \{\par
        root->left = leftRotate(root->left);\par
        return rightRotate(root);\par
    \}\par
\par
    if (balance < -1 && getBalance(root->right) <= 0)\par
        return leftRotate(root);\par
if (balance < -1 && getBalance(root->right) > 0) \{\par
        root->right = rightRotate(root->right);\par
        return leftRotate(root);\par
    \}\par
return root;\par
\}\par
AVLNode* search(AVLNode *root, int key) \{\par
    if (root == NULL || root->key == key)\par
        return root;\par
        if (key < root->key)\par
        return search(root->left, key);\par
    else\par
        return search(root->right, key);\par
\}\par
void inorder(AVLNode *root) \{\par
    if (root != NULL) \{\par
        inorder(root->left);\par
        printf("%d ", root->key);\par
        inorder(root->right);\par
    \}\par
\}\par
void freeTree(AVLNode *root) \{\par
    if (root != NULL) \{\par
        freeTree(root->left);\par
        freeTree(root->right);\par
        free(root);\par
    \}\par
\}\par
int main() \{\par
    AVLNode *root = NULL;\par
    root = insert(root, 10);\par
    root = insert(root, 20);\par
    root = insert(root, 30);\par
    root = insert(root, 40);\par
\b     \b0 root = insert(root, 50);\par
    root = insert(root, 25);printf("Inorder traversal of the AVL tree is: ");\par
    inorder(root);\par
    printf("\\n");\par
    int key = 30;\par
    AVLNode *result = search(root, key);\par
    if (result != NULL)\par
        printf("Element %d found in the AVL tree.\\n", key);\par
    else\par
        printf("Element %d not found in the AVL tree.\\n", key);\par
    root = deleteNode(root, 10);\par
    printf("Inorder traversal after deleting 10: ");\par
    inorder(root);\par
    printf("\\n");\par
    freeTree(root);\par
\par
    return 0;\par
\}\par
\b output:\par
\b0 Inorder traversal of the AVL tree is: 10 20 25 30 40 50 \par
Element 30 found in the AVL tree.\par
Inorder traversal after deleting 10: 20 25 30 40 50 \par
\par

\pard\widctlpar\sa160\sl360\slmult1\qj\fs32 3.Write a C program to implement Red black tree.\par

\pard\widctlpar\li720\sa160\sl240\slmult1\qj\fs28 #include <stdio.h>\par
#include <stdlib.h>\par
#define RED 0\par
#define BLACK 1\par
typedef struct RBTreeNode \{\par
    int key;\par
    struct RBTreeNode *left;\par
    struct RBTreeNode *right;\par
    struct RBTreeNode *parent;\par
    int color; // RED or BLACK\par
\} RBTreeNode;\par
RBTreeNode* createNode(int key);\par
void rotateLeft(RBTreeNode** root, RBTreeNode* x);\par
void rotateRight(RBTreeNode** root, RBTreeNode* y);\par
void insertFixup(RBTreeNode** root, RBTreeNode* node);\par
void insertNode(RBTreeNode** root, int key);\par
void inorderTraversal(RBTreeNode* root);\par
void freeTree(RBTreeNode* root);\par
RBTreeNode* createNode(int key) \{\par
    RBTreeNode* node = (RBTreeNode*)malloc(sizeof(RBTreeNode));\par
    node->key = key;\par
    node->left = NULL;\par
    node->right = NULL;\par
    node->parent = NULL;\par
    node->color = RED; // New nodes are always RED\par
    return node;\par
\}\par
void rotateLeft(RBTreeNode** root, RBTreeNode* x) \{\par
    RBTreeNode* y = x->right;\par
    x->right = y->left;\par
    if (y->left != NULL)\par
        y->left->parent = x;\par
    y->parent = x->parent;\par
    if (x->parent == NULL)\par
        *root = y;\par
    else if (x == x->parent->left)\par
        x->parent->left = y;\par
    else\par
        x->parent->right = y;\par
    y->left = x;\par
    x->parent = y;\par
\}\par
void rotateRight(RBTreeNode** root, RBTreeNode* y) \{\par
    RBTreeNode* x = y->left;\par
    y->left = x->right;\par
    if (x->right != NULL)\par
        x->right->parent = y;\par
    x->parent = y->parent;\par
    if (y->parent == NULL)\par
        *root = x;\par
    else if (y == y->parent->left)\par
        y->parent->left = x;\par
    else\par
        y->parent->right = x;\par
    x->right = y;\par
    y->parent = x;\par
\}\par
void insertFixup(RBTreeNode** root, RBTreeNode* node) \{\par
    RBTreeNode* uncle;\par
    while (node != *root && node->parent->color == RED) \{\par
        if (node->parent == node->parent->parent->left) \{\par
            uncle = node->parent->parent->right;\par
            if (uncle != NULL && uncle->color == RED) \{\par
                node->parent->color = BLACK;\par
                uncle->color = BLACK;\par
                node->parent->parent->color = RED;\par
                node = node->parent->parent;\par
            \} else \{\par
                if (node == node->parent->right) \{\par
                    node = node->parent;\par
                    rotateLeft(root, node);\par
                \}\par
                node->parent->color = BLACK;\par
                node->parent->parent->color = RED;\par
                rotateRight(root, node->parent->parent);\par
            \}\par
        \} else \{\par
            uncle = node->parent->parent->left;\par
            if (uncle != NULL && uncle->color == RED) \{\par
                node->parent->color = BLACK;\par
                uncle->color = BLACK;\par
                node->parent->parent->color = RED;\par
                node = node->parent->parent;\par
            \} else \{\par
                if (node == node->parent->left) \{\par
                    node = node->parent;\par
                    rotateRight(root, node);\par
                \}\par
                node->parent->color = BLACK;\par
                node->parent->parent->color = RED;\par
                rotateLeft(root, node->parent->parent);\par
            \}\par
        \}\par
    \}\par
    (*root)->color = BLACK;\par
\}\par
void insertNode(RBTreeNode** root, int key) \{\par
    RBTreeNode* node = createNode(key);\par
    RBTreeNode* y = NULL;\par
    RBTreeNode* x = *root;\par
 while (x != NULL) \{\par
        y = x;\par
        if (node->key < x->key)\par
            x = x->left;\par
        else\par
            x = x->right;\par
    \}\par
    node->parent = y;\par
    if (y == NULL)\par
        *root = node;\par
    else if (node->key < y->key)\par
        y->left = node;\par
    else\par
        y->right = node;\par
\par
    insertFixup(root, node);\par
\}\par
void inorderTraversal(RBTreeNode* root) \{\par
    if (root != NULL) \{\par
        inorderTraversal(root->left);\par
        printf("%d ", root->key);\par
        inorderTraversal(root->right);\par
    \}\par
\}\par
void freeTree(RBTreeNode* root) \{\par
    if (root != NULL) \{\par
        freeTree(root->left);\par
        freeTree(root->right);\par
        free(root);\par
    \}\par
\}\par
int main() \{\par
    RBTreeNode* root = NULL;\par
    insertNode(&root, 10);\par
    insertNode(&root, 20);\par
    insertNode(&root, 30);\par
    insertNode(&root, 15);\par
    insertNode(&root, 25);\par
    printf("Inorder traversal of the Red-Black Tree: ");\par
    inorderTraversal(root);\par
    printf("\\n");\par
    freeTree(root);\par
\par
    return 0;\par
\}\par
\b output:\par
\b0 Inorder traversal of the Red-Black Tree: 10 15 20 25 30 \par
\par
\b\f2\fs32 4.Write a C program to implement B Tree\b0\par
\fs28 #include <stdio.h>\par
#include <stdlib.h>\par
#define T 3\par
typedef struct BTreeNode \{\par
    int *keys;\par
    struct BTreeNode **children;\par
    int numKeys;\par
    int leaf;\par
\} BTreeNode;\par
BTreeNode* createNode(int leaf);\par
void traverse(BTreeNode* root);\par
void insertNonFull(BTreeNode* node, int key);\par
void splitChild(BTreeNode* parent, int i);\par
void insert(BTreeNode** root, int key);\par
BTreeNode* search(BTreeNode* root, int key);\par
void freeTree(BTreeNode* root);\par
BTreeNode* createNode(int leaf) \{\par
    BTreeNode* node = (BTreeNode*)malloc(sizeof(BTreeNode));\par
    node->keys = (int*)malloc((2 * T - 1) * sizeof(int));\par
    node->children = (BTreeNode**)malloc(2 * T * sizeof(BTreeNode*));\par
    node->numKeys = 0;\par
    node->leaf = leaf;\par
    return node;\par
\}\par
void traverse(BTreeNode* root) \{\par
    int i;\par
    if (root != NULL) \{\par
        for (i = 0; i < root->numKeys; i++) \{\par
            if (!root->leaf) \{\par
                traverse(root->children[i]);\par
            \}\par
            printf("%d ", root->keys[i]);\par
        \}\par
        if (!root->leaf) \{\par
            traverse(root->children[i]);\par
        \}\par
    \}\par
\}\par
void insertNonFull(BTreeNode* node, int key) \{\par
    int i = node->numKeys - 1;\par
\par
    if (node->leaf) \{\par
        while (i >= 0 && key < node->keys[i]) \{\par
            node->keys[i + 1] = node->keys[i];\par
            i--;\par
        \}\par
        node->keys[i + 1] = key;\par
        node->numKeys++;\par
    \} else \{\par
        while (i >= 0 && key < node->keys[i]) \{\par
            i--;\par
        \}\par
        i++;\par
        if (node->children[i]->numKeys == 2 * T - 1) \{\par
            splitChild(node, i);\par
            if (key > node->keys[i]) \{\par
                i++;\par
            \}\par
        \}\par
        insertNonFull(node->children[i], key);\par
    \}\par
\}\par
void splitChild(BTreeNode* parent, int i) \{\par
    BTreeNode* fullChild = parent->children[i];\par
    BTreeNode* newChild = createNode(fullChild->leaf);\par
    int medianIndex = T - 1;\par
\par
    newChild->numKeys = medianIndex;\par
    for (int j = 0; j < medianIndex; j++) \{\par
        newChild->keys[j] = fullChild->keys[j + T];\par
    \}\par
    if (!fullChild->leaf) \{\par
        for (int j = 0; j < T; j++) \{\par
            newChild->children[j] = fullChild->children[j + T];\par
        \}\par
    \}\par
    fullChild->numKeys = medianIndex;\par
    for (int j = parent->numKeys; j >= i + 1; j--) \{\par
        parent->children[j + 1] = parent->children[j];\par
    \}\par
    parent->children[i + 1] = newChild;\par
\par
    for (int j = parent->numKeys - 1; j >= i; j--) \{\par
        parent->keys[j + 1] = parent->keys[j];\par
    \}\par
    parent->keys[i] = fullChild->keys[medianIndex];\par
    parent->numKeys++;\par
\}\par
void insert(BTreeNode** root, int key) \{\par
    BTreeNode* r = *root;\par
    if (r->numKeys == 2 * T - 1) \{\par
        BTreeNode* s = createNode(0);\par
        *root = s;\par
        s->children[0] = r;\par
\fs32         \fs28 splitChild(s, 0);\par
        insertNonFull(s, key);\par
    \} else \{\par
        insertNonFull(r, key);\par
    \}\par
\}\par
BTreeNode* search(BTreeNode* root, int key) \{\par
    int i = 0;\par
    while (i < root->numKeys && key > root->keys[i]) \{\par
        i++;\par
    \}\par
    if (i < root->numKeys && key == root->keys[i]) \{\par
        return root;\par
    \}\par
    if (root->leaf) \{\par
        return NULL;\par
    \}\par
    return search(root->children[i], key);\par
\}\par
void freeTree(BTreeNode* root) \{\par
    if (root != NULL) \{\par
        if (!root->leaf) \{\par
            for (int i = 0; i <= root->numKeys; i++) \{\par
                freeTree(root->children[i]);\par
            \}\par
        \}\par
        free(root->keys);\par
        free(root->children);\par
        free(root);\par
    \}\par
\}\par
int main() \{\par
    BTreeNode* root = createNode(1); \par
    insert(&root, 10);\par
    insert(&root, 20);\par
    insert(&root, 5);\par
    insert(&root, 6);\par
    insert(&root, 15);printf("Inorder traversal of the B-Tree: ");\par
    traverse(root);\par
    printf("\\n");\par
    int key = 15;\par
    BTreeNode* result = search(root, key);\par
    if (result != NULL)\par
        printf("Element %d found in the B-Tree.\\n", key);\par
    else\par
        printf("Element %d not found in the B-Tree.\\n", key);\par
    freeTree(root);\par
 return 0;\par
\}\par
\b\fs32 output\par
\b0 Inorder traversal of the B-Tree: 5 6 10 15 20 \par
Element 15 found in the B-Tree.\fs28\par
\par

\pard\widctlpar\sa160\sl276\slmult1\b\fs32 5.Write a C program to implement B+ Tree.\b0\par
\fs28 #include <stdio.h>\par
#include <stdlib.h>\par
#define T 3\par
typedef struct BPlusTreeNode \{\par
    int *keys;\par
    struct BPlusTreeNode **children;\par
    struct BPlusTreeNode *next; // Pointer to the next leaf node\par
    int numKeys;\par
    int leaf;\par
\} BPlusTreeNode;\par
BPlusTreeNode* createNode(int leaf);\par
void traverse(BPlusTreeNode* root);\par
void insertNonFull(BPlusTreeNode* node, int key);\par
void splitChild(BPlusTreeNode* parent, int i);\par
void insert(BPlusTreeNode** root, int key);\par
BPlusTreeNode* search(BPlusTreeNode* root, int key);\par
void freeTree(BPlusTreeNode* root);\par
BPlusTreeNode* createNode(int leaf) \{\par
    BPlusTreeNode* node = (BPlusTreeNode*)malloc(sizeof(BPlusTreeNode));\par
    node->keys = (int*)malloc((2 * T - 1) * sizeof(int));\par
    node->children = (BPlusTreeNode**)malloc(2 * T * sizeof(BPlusTreeNode*));\par
    node->next = NULL;\par
    node->numKeys = 0;\par
    node->leaf = leaf;\par
    return node;\par
\}\par
void traverse(BPlusTreeNode* root) \{\par
    BPlusTreeNode* current = root;\par
    while (current != NULL) \{\par
        for (int i = 0; i < current->numKeys; i++) \{\par
            printf("%d ", current->keys[i]);\par
        \}\par
        current = current->next;\par
    \}\par
\}\par
void insertNonFull(BPlusTreeNode* node, int key) \{\par
    int i = node->numKeys - 1;\par
     if (node->leaf) \{\par
        while (i >= 0 && key < node->keys[i]) \{\par
            node->keys[i + 1] = node->keys[i];\par
            i--;\par
        \}\par
        node->keys[i + 1] = key;\par
        node->numKeys++;\par
    \} else \{\par
        while (i >= 0 && key < node->keys[i]) \{\par
            i--;\par
        \}\par
        i++;\par
        if (node->children[i]->numKeys == 2 * T - 1) \{\par
            splitChild(node, i);\par
            if (key > node->keys[i]) \{\par
                i++;\par
            \}\par
        \}\par
        insertNonFull(node->children[i], key);\par
    \}\par
\}\par
void splitChild(BPlusTreeNode* parent, int i) \{\par
    BPlusTreeNode* fullChild = parent->children[i];\par
    BPlusTreeNode* newChild = createNode(fullChild->leaf);\par
    int medianIndex = T - 1;\par
\par
    newChild->numKeys = medianIndex;\par
    for (int j = 0; j < medianIndex; j++) \{\par
        newChild->keys[j] = fullChild->keys[j + T];\par
    \}\par
    if (!fullChild->leaf) \{\par
        for (int j = 0; j < T; j++) \{\par
            newChild->children[j] = fullChild->children[j + T];\par
        \}\par
    \}\par
    fullChild->numKeys = medianIndex;\par
\par
    for (int j = parent->numKeys; j >= i + 1; j--) \{\par
        parent->children[j + 1] = parent->children[j];\par
    \}\par
    parent->children[i + 1] = newChild;\par
\par
    for (int j = parent->numKeys - 1; j >= i; j--) \{\par
        parent->keys[j + 1] = parent->keys[j];\par
    \}\par
    parent->keys[i] = fullChild->keys[medianIndex];\par
    parent->numKeys++;\par
\}\par
void insert(BPlusTreeNode** root, int key) \{\par
    BPlusTreeNode* r = *root;\par
    if (r->numKeys == 2 * T - 1) \{\par
        BPlusTreeNode* s = createNode(0);\par
        *root = s;\par
        s->children[0] = r;\par
        splitChild(s, 0);\par
        insertNonFull(s, key);\par
    \} else \{\par
        insertNonFull(r, key);\par
    \}\par
\}\par
BPlusTreeNode* search(BPlusTreeNode* root, int key) \{\par
    int i = 0;\par
    while (i < root->numKeys && key > root->keys[i]) \{\par
        i++;\par
    \}\par
    if (i < root->numKeys && key == root->keys[i]) \{\par
        return root;\par
    \}\par
    if (root->leaf) \{\par
        return NULL;\par
    \}\par
    return search(root->children[i], key);\par
\}\par
void freeTree(BPlusTreeNode* root) \{\par
    if (root != NULL) \{\par
        if (!root->leaf) \{\par
            for (int i = 0; i <= root->numKeys; i++) \{\par
                freeTree(root->children[i]);\par
            \}\par
        \}\par
        free(root->keys);\par
        free(root->children);\par
        free(root);\par
    \}\par
\}\par
int main() \{\par
    BPlusTreeNode* root = createNode(1); \par
    insert(&root, 10);\par
    insert(&root, 20);\par
    insert(&root, 5);\par
    insert(&root, 6);\par
    insert(&root, 15);\par
    printf("Inorder traversal of the B+ Tree: ");\par
    traverse(root);\par
    printf("\\n");\par
    int key = 15;\par
    BPlusTreeNode* result = search(root, key);\par
    if (result != NULL)\par
        printf("Element %d found in the B+ Tree.\\n", key);\par
    else\par
        printf("Element %d not found in the B+ Tree.\\n", key);\par
    freeTree(root);\par
return 0;\par
\}\par
\b\fs32 output:\par
\b0\fs28 Inorder traversal of the B+ Tree: 5 6 10 15 20 \par
Element 15 found in the B+ Tree.\par

\pard\widctlpar\li720\sa160\sl240\slmult1\qj\f1\par
\par
\par
\par

\pard\widctlpar\sa160\sl240\slmult1\qj\par

\pard\sa200\sl240\slmult1\f0\lang9\par
}
 